// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CommandLineHelp prints the global help 1`] = `
"usage: rush [-h] [-d] <command> ...

Rush makes life easier for JavaScript developers who develop, build, and 
publish many packages from a central Git repo. It is designed to handle very 
large repositories supporting many projects and people. Rush provides 
policies, protections, and customizations that help coordinate teams and 
safely onboard new contributors. Rush also generates change logs and 
automates package publishing. It can manage decoupled subsets of projects 
with different release and versioning strategies. A full API is included to 
facilitate integration with other automation tools. If you are looking for a 
proven turnkey solution for monorepo management, Rush is for you.

Positional arguments:
  <command>
    add           Adds a dependency to the package.json and runs rush upgrade.
    change        Records changes made to projects, indicating how the 
                  package version number should be bumped for the next 
                  publish.
    check         Checks each project's package.json files and ensures that 
                  all dependencies are of the same version throughout the 
                  repository.
    install       Install package dependencies for all projects in the repo 
                  according to the shrinkwrap file
    init          Initializes a new repository to be managed by Rush
    link          Create node_modules symlinks for all projects
    list          List package information for all projects in the repo
    publish       Reads and processes package publishing change requests 
                  generated by \\"rush change\\".
    purge         For diagnostic purposes, use this command to delete caches 
                  and other temporary files used by Rush
    scan          Scan the current project folder and display a report of 
                  imported packages.
    update        Install package dependencies for all projects in the repo, 
                  and create or update the shrinkwrap file as needed
    unlink        Delete node_modules symlinks for all projects in the repo
    version       (EXPERIMENTAL) Manage package versions in the repo.
    import-strings
                  Imports translated strings into each project.
    deploy        Deploys the build
    build         (EXPERIMENTAL) Build all projects that haven't been built, 
                  or have changed since they were last built.
    rebuild       Clean and rebuild the entire set of projects

Optional arguments:
  -h, --help      Show this help message and exit.
  -d, --debug     Show the full call stack if an error occurs while executing 
                  the tool

For detailed help about a specific command, use: rush <command> -h
"
`;

exports[`CommandLineHelp prints the help for each action: add 1`] = `
"usage: rush add [-h] -p PACKAGE [--exact] [--caret] [--dev] [-m] [-s] [--all]

Adds a specified package as a dependency of the current project (as 
determined by the current working directory) and then runs \\"rush update\\". If 
no version is specified, a version will be automatically detected (typically 
either the latest version or a version that won't break the 
\\"ensureConsistentVersions\\" policy). If a version range is specified, the 
latest version in the range will be used. The version will be automatically 
prepended with a tilde, unless the \\"--exact\\" or \\"--caret\\" flags are used. The 
\\"--make-consistent\\" flag can be used to update all packages with the 
dependency.

Optional arguments:
  -h, --help            Show this help message and exit.
  -p PACKAGE, --package PACKAGE
                        (Required) The name of the package which should be 
                        added as a dependency. A SemVer version specifier can 
                        be appended after an \\"@\\" sign. WARNING: Symbol 
                        characters are usually interpreted by your shell, so 
                        it's recommended to use quotes. For example, write 
                        \\"rush add --package \\"example@^1.2.3\\"\\" instead of 
                        \\"rush add --package example@^1.2.3\\".
  --exact               If specified, the SemVer specifier added to the 
                        package.json will be an exact version (e.g. without 
                        tilde or caret).
  --caret               If specified, the SemVer specifier added to the 
                        package.json will be a prepended with a \\"caret\\" 
                        specifier (\\"^\\").
  --dev                 If specified, the package will be added to the 
                        \\"devDependencies\\" section of the package.json
  -m, --make-consistent
                        If specified, other packages with this dependency 
                        will have their package.json files updated to use the 
                        same version of the dependency.
  -s, --skip-update     If specified, the \\"rush update\\" command will not be 
                        run after updating the package.json files.
  --all                 If specified, the dependency will be added to all of 
                        your projects.
"
`;

exports[`CommandLineHelp prints the help for each action: build 1`] = `
"usage: rush build [-h] [-p COUNT] [-t PROJECT1]
                  [--to-version-policy VERSION_POLICY_NAME] [-f PROJECT2] [-v]
                  [-o] [-s] [-m]
                  

This command is similar to \\"rush rebuild\\", except that \\"rush build\\" performs 
an incremental build. In other words, it only builds projects whose source 
files have changed since the last successful build. The analysis requires a 
Git working tree, and only considers source files that are tracked by Git and 
whose path is under the project folder. (For more details about this 
algorithm, see the documentation for the \\"package-deps-hash\\" NPM package.) 
The incremental build state is tracked in a file \\"package-deps.json\\" which 
should NOT be added to Git. The build command is tracked by the \\"arguments\\" 
field in this JSON file; a full rebuild is forced whenever the command has 
changed (e.g. \\"--production\\" or not).

Optional arguments:
  -h, --help            Show this help message and exit.
  -p COUNT, --parallelism COUNT
                        Specify the number of concurrent build processes The 
                        value \\"max\\" can be specified to indicate the number 
                        of CPU cores. If this parameter omitted, the default 
                        value depends on the operating system and number of 
                        CPU cores.
  -t PROJECT1, --to PROJECT1
                        Run command in the specified project and all of its 
                        dependencies
  --to-version-policy VERSION_POLICY_NAME
                        Run command in all projects with the specified 
                        version policy and all of their dependencies
  -f PROJECT2, --from PROJECT2
                        Run command in all projects that directly or 
                        indirectly depend on the specified project
  -v, --verbose         Display the logs during the build, rather than just 
                        displaying the build status summary
  -o, --changed-projects-only
                        If specified, the incremental build will only rebuild 
                        projects that have changed, but not any projects that 
                        directly or indirectly depend on the changed package.
  -s, --ship            Perform a production build, including minification 
                        and localization steps
  -m, --minimal         Perform a fast build, which disables certain tasks 
                        such as unit tests and linting
"
`;

exports[`CommandLineHelp prints the help for each action: change 1`] = `
"usage: rush change [-h] [-v] [--no-fetch] [-b BRANCH]

Asks a series of questions and then generates a <branchname>-<timestamp>.json 
file in the common folder. The \`publish\` command will consume these files and 
perform the proper version bumps. Note these changes will eventually be 
published in a changelog.md file in each package. The possible types of 
changes are: MAJOR - these are breaking changes that are not backwards 
compatible. Examples are: renaming a public class, adding/removing a 
non-optional parameter from a public API, or renaming an variable or function 
that is exported. MINOR - these are changes that are backwards compatible 
(but not forwards compatible). Examples are: adding a new public API or 
adding an optional parameter to a public API PATCH - these are changes that 
are backwards and forwards compatible. Examples are: Modifying a private API 
or fixing a bug in the logic of how an existing API works. HOTFIX 
(EXPERIMENTAL) - these are changes that are hotfixes targeting a specific 
older version of the package. When a hotfix change is added, other changes 
will not be able to increment the version number.Enable this feature by 
setting 'hotfixChangeEnabled' in your rush.json.

Optional arguments:
  -h, --help            Show this help message and exit.
  -v, --verify          Verify the change file has been generated and that it 
                        is a valid JSON file
  --no-fetch            Skips fetching the baseline branch before running 
                        \\"git diff\\" to detect changes.
  -b BRANCH, --target-branch BRANCH
                        If this parameter is specified, compare the checked 
                        out branch with the specified branch todetermine 
                        which projects were changed. If this parameter is not 
                        specified, the checked out branch is compared against 
                        the \\"master\\" branch.
"
`;

exports[`CommandLineHelp prints the help for each action: check 1`] = `
"usage: rush check [-h] [--variant VARIANT]

Checks each project's package.json files and ensures that all dependencies 
are of the same version throughout the repository.

Optional arguments:
  -h, --help         Show this help message and exit.
  --variant VARIANT  Run command using a variant installation configuration. 
                     This parameter may alternatively specified via the 
                     RUSH_VARIANT environment variable.
"
`;

exports[`CommandLineHelp prints the help for each action: deploy 1`] = `
"usage: rush deploy [-h] [--locale {en-us,fr-fr,es-es,zh-cn}]

Uploads all the built assets to the CDN

Optional arguments:
  -h, --help            Show this help message and exit.
  --locale {en-us,fr-fr,es-es,zh-cn}
                        Selects a single instead of the default locale 
                        (en-us) for non-ship builds or all locales for ship 
                        builds.
"
`;

exports[`CommandLineHelp prints the help for each action: import-strings 1`] = `
"usage: rush import-strings [-h] [-p COUNT] [-t PROJECT1]
                           [--to-version-policy VERSION_POLICY_NAME]
                           [-f PROJECT2] [-v]
                           [--locale {en-us,fr-fr,es-es,zh-cn}]
                           

Requests translated strings from the translation service and imports them 
into each project.

Optional arguments:
  -h, --help            Show this help message and exit.
  -p COUNT, --parallelism COUNT
                        Specify the number of concurrent build processes The 
                        value \\"max\\" can be specified to indicate the number 
                        of CPU cores. If this parameter omitted, the default 
                        value depends on the operating system and number of 
                        CPU cores.
  -t PROJECT1, --to PROJECT1
                        Run command in the specified project and all of its 
                        dependencies
  --to-version-policy VERSION_POLICY_NAME
                        Run command in all projects with the specified 
                        version policy and all of their dependencies
  -f PROJECT2, --from PROJECT2
                        Run command in all projects that directly or 
                        indirectly depend on the specified project
  -v, --verbose         Display the logs during the build, rather than just 
                        displaying the build status summary
  --locale {en-us,fr-fr,es-es,zh-cn}
                        Selects a single instead of the default locale 
                        (en-us) for non-ship builds or all locales for ship 
                        builds.
"
`;

exports[`CommandLineHelp prints the help for each action: init 1`] = `
"usage: rush init [-h] [--overwrite-existing] [--rush-example-repo]

When invoked in an empty folder, this command provisions a standard set of 
config file templates to start managing projects using Rush.

Optional arguments:
  -h, --help            Show this help message and exit.
  --overwrite-existing  By default \\"rush init\\" will not overwrite existing 
                        config files. Specify this switch to override that. 
                        This can be useful when upgrading your repo to a 
                        newer release of Rush. WARNING: USE WITH CARE!
  --rush-example-repo   When copying the template config files, this 
                        uncomments fragments that are used by the 
                        \\"rush-example\\" GitHub repo, which is a sample 
                        monorepo that illustrates many Rush features. This 
                        option is primarily intended for maintaining that 
                        example.
"
`;

exports[`CommandLineHelp prints the help for each action: install 1`] = `
"usage: rush install [-h] [-p] [--bypass-policy] [--no-link]
                    [--network-concurrency COUNT] [--debug-package-manager]
                    [--variant VARIANT]
                    

The \\"rush install\\" command installs package dependencies for all your 
projects, based on the shrinkwrap file that is created/updated using \\"rush 
update\\". (This \\"shrinkwrap\\" file stores a central inventory of all 
dependencies and versions for projects in your repo. It is found in the 
\\"common/config/rush\\" folder.) If the shrinkwrap file is missing or outdated 
(e.g. because project package.json files have changed), \\"rush install\\" will 
fail and tell you to run \\"rush update\\" instead. This read-only nature is the 
main feature: Continuous integration builds should use \\"rush install\\" instead 
of \\"rush update\\" to catch developers who forgot to commit their shrinkwrap 
changes. Cautious people can also use \\"rush install\\" if they want to avoid 
accidentally updating their shrinkwrap file.

Optional arguments:
  -h, --help            Show this help message and exit.
  -p, --purge           Perform \\"rush purge\\" before starting the installation
  --bypass-policy       Overrides enforcement of the \\"gitPolicy\\" rules from 
                        rush.json (use honorably!)
  --no-link             If \\"--no-link\\" is specified, then project symlinks 
                        will NOT be created after the installation completes. 
                        You will need to run \\"rush link\\" manually. This flag 
                        is useful for automated builds that want to report 
                        stages individually or perform extra operations in 
                        between the two stages.
  --network-concurrency COUNT
                        If specified, limits the maximum number of concurrent 
                        network requests. This is useful when troubleshooting 
                        network failures.
  --debug-package-manager
                        Activates verbose logging for the package manager. 
                        You will probably want to pipe the output of Rush to 
                        a file when using this command.
  --variant VARIANT     Run command using a variant installation 
                        configuration. This parameter may alternatively 
                        specified via the RUSH_VARIANT environment variable.
"
`;

exports[`CommandLineHelp prints the help for each action: link 1`] = `
"usage: rush link [-h] [-f]

Create node_modules symlinks for all projects. This operation is normally 
performed automatically as part of \\"rush install\\" or \\"rush update\\". You 
should only need to use \\"rush link\\" if you performed \\"rush unlink\\" for some 
reason, or if you specified the \\"--no-link\\" option for \\"rush install\\" or 
\\"rush update\\".

Optional arguments:
  -h, --help   Show this help message and exit.
  -f, --force  Deletes and recreates all links, even if the filesystem state 
               seems to indicate that this is unnecessary.
"
`;

exports[`CommandLineHelp prints the help for each action: list 1`] = `
"usage: rush list [-h] [-v] [-p] [-f]

List package names, and optionally version (--version) and path (--path) or 
full path (--full-path), for projects in the current rush config.

Optional arguments:
  -h, --help       Show this help message and exit.
  -v, --version    If this flag is specified, the project version will be 
                   displayed in a column along with the package name.
  -p, --path       If this flag is specified, the project path will be 
                   displayed in a column along with the package name.
  -f, --full-path  If this flag is specified, the project full path will be 
                   displayed in a column along with the package name.
"
`;

exports[`CommandLineHelp prints the help for each action: publish 1`] = `
"usage: rush publish [-h] [-a] [-b BRANCH] [-p] [--add-commit-details]
                    [--regenerate-changelogs] [-r REGISTRY] [-n TOKEN]
                    [-t TAG] [--set-access-level {public,restricted}] [--pack]
                    [--release-folder FOLDER] [--include-all]
                    [--version-policy POLICY] [--prerelease-name NAME]
                    [--partial-prerelease] [--suffix SUFFIX] [--force]
                    

Reads and processes package publishing change requests generated by \\"rush 
change\\". This will perform a read-only operation by default, printing 
operations executed to the console. To commit changes and publish packages, 
you must use the --commit flag and/or the --publish flag.

Optional arguments:
  -h, --help            Show this help message and exit.
  -a, --apply           If this flag is specified, the change requests will 
                        be applied to package.json files.
  -b BRANCH, --target-branch BRANCH
                        If this flag is specified, applied changes and 
                        deleted change requests will becommitted and merged 
                        into the target branch.
  -p, --publish         If this flag is specified, applied changes will be 
                        published to npm.
  --add-commit-details  Adds commit author and hash to the changelog.json 
                        files for each change.
  --regenerate-changelogs
                        Regenerates all changelog files based on the current 
                        JSON content.
  -r REGISTRY, --registry REGISTRY
                        Publishes to a specified NPM registry. If this is 
                        specified, it will prevent the current commit will 
                        not be tagged.
  -n TOKEN, --npm-auth-token TOKEN
                        Provide the default scope NPM auth token to be passed 
                        into npm publish for global package publishing.
  -t TAG, --tag TAG     The tag option to pass to npm publish. By default NPM 
                        will publish using the 'latest' tag, even if the 
                        package is older than the current latest, so in 
                        publishing workflows for older releases, providing a 
                        tag is important. When hotfix changes are made, this 
                        parameter defaults to 'hotfix'.
  --set-access-level {public,restricted}
                        By default, when Rush invokes \\"npm publish\\" it will 
                        publish scoped packages with an access level of 
                        \\"restricted\\". Scoped packages can be published with 
                        an access level of \\"public\\" by specifying that value 
                        for this flag with the initial publication. NPM 
                        always publishes unscoped packages with an access 
                        level of \\"public\\". For more information, see the NPM 
                        documentation for the \\"--access\\" option of \\"npm 
                        publish\\".
  --pack                Packs projects into tarballs instead of publishing to 
                        npm repository. It can only be used when 
                        --include-all is specified. If this flag is specified,
                         NPM registry related parameters will be ignored.
  --release-folder FOLDER
                        This parameter is used with --pack parameter to 
                        provide customized location for the tarballs instead 
                        of the default value.
  --include-all         If this flag is specified, all packages with 
                        shouldPublish=true in rush.json or with a specified 
                        version policy will be published if their version is 
                        newer than published version.
  --version-policy POLICY
                        Version policy name. Only projects with this version 
                        policy will be published if used with --include-all.
  --prerelease-name NAME
                        Bump up to a prerelease version with the provided 
                        prerelease name. Cannot be used with --suffix
  --partial-prerelease  Used with --prerelease-name. Only bump packages to a 
                        prerelease version if they have changes.
  --suffix SUFFIX       Append a suffix to all changed versions. Cannot be 
                        used with --prerelease-name.
  --force               If this flag is specified with --publish, packages 
                        will be published with --force on npm
"
`;

exports[`CommandLineHelp prints the help for each action: purge 1`] = `
"usage: rush purge [-h] [--unsafe]

The \\"rush purge\\" command is used to delete temporary files created by Rush. 
This is useful if you are having problems and suspect that cache files may be 
corrupt.

Optional arguments:
  -h, --help  Show this help message and exit.
  --unsafe    (UNSAFE!) Also delete shared files such as the package manager 
              instances stored in the \\".rush\\" folder in the user's home 
              directory. This is a more aggressive fix that is NOT SAFE to 
              run in a live environment because it will cause other 
              concurrent Rush processes to fail.
"
`;

exports[`CommandLineHelp prints the help for each action: rebuild 1`] = `
"usage: rush rebuild [-h] [-p COUNT] [-t PROJECT1]
                    [--to-version-policy VERSION_POLICY_NAME] [-f PROJECT2]
                    [-v] [-s] [-m]
                    

This command assumes that the package.json file for each project contains a 
\\"scripts\\" entry for \\"npm run build\\" that performs a full clean build. Rush 
invokes this script to build each project that is registered in rush.json. 
Projects are built in parallel where possible, but always respecting the 
dependency graph for locally linked projects. The number of simultaneous 
processes will be based on the number of machine cores unless overridden by 
the --parallelism flag. (For an incremental build, see \\"rush build\\" instead 
of \\"rush rebuild\\".)

Optional arguments:
  -h, --help            Show this help message and exit.
  -p COUNT, --parallelism COUNT
                        Specify the number of concurrent build processes The 
                        value \\"max\\" can be specified to indicate the number 
                        of CPU cores. If this parameter omitted, the default 
                        value depends on the operating system and number of 
                        CPU cores.
  -t PROJECT1, --to PROJECT1
                        Run command in the specified project and all of its 
                        dependencies
  --to-version-policy VERSION_POLICY_NAME
                        Run command in all projects with the specified 
                        version policy and all of their dependencies
  -f PROJECT2, --from PROJECT2
                        Run command in all projects that directly or 
                        indirectly depend on the specified project
  -v, --verbose         Display the logs during the build, rather than just 
                        displaying the build status summary
  -s, --ship            Perform a production build, including minification 
                        and localization steps
  -m, --minimal         Perform a fast build, which disables certain tasks 
                        such as unit tests and linting
"
`;

exports[`CommandLineHelp prints the help for each action: scan 1`] = `
"usage: rush scan [-h]

The NPM system allows a project to import dependencies without explicitly 
listing them in its package.json file. This is a dangerous practice, because 
there is no guarantee you will get a compatible version. The \\"rush scan\\" 
command reports a list of packages that are imported by your code, which you 
can compare against your package.json file to find mistakes. It searches the 
\\"./src\\" and \\"./lib\\" folders for typical import syntaxes such as \\"import __ 
from '__'\\", \\"require('__')\\", \\"System.import('__'), etc. The results are only 
approximate, but generally pretty accurate.

Optional arguments:
  -h, --help  Show this help message and exit.
"
`;

exports[`CommandLineHelp prints the help for each action: unlink 1`] = `
"usage: rush unlink [-h]

This removes the symlinks created by the \\"rush link\\" command. This is useful 
for cleaning a repo using \\"git clean\\" without accidentally deleting source 
files, or for using standard NPM commands on a project.

Optional arguments:
  -h, --help  Show this help message and exit.
"
`;

exports[`CommandLineHelp prints the help for each action: update 1`] = `
"usage: rush update [-h] [-p] [--bypass-policy] [--no-link]
                   [--network-concurrency COUNT] [--debug-package-manager]
                   [--variant VARIANT] [--full] [--recheck]
                   

The \\"rush update\\" command installs the dependencies described in your package.
json files, and updates the shrinkwrap file as needed. (This \\"shrinkwrap\\" 
file stores a central inventory of all dependencies and versions for projects 
in your repo. It is found in the \\"common/config/rush\\" folder.) Note that Rush 
always performs a single install for all projects in your repo. You should 
run \\"rush update\\" whenever you start working in a Rush repo, after you pull 
from Git, and after you modify a package.json file. If there is nothing to do,
 \\"rush update\\" is instantaneous. NOTE: In certain cases \\"rush install\\" should 
be used instead of \\"rush update\\" -- for details, see the command help for 
\\"rush install\\".

Optional arguments:
  -h, --help            Show this help message and exit.
  -p, --purge           Perform \\"rush purge\\" before starting the installation
  --bypass-policy       Overrides enforcement of the \\"gitPolicy\\" rules from 
                        rush.json (use honorably!)
  --no-link             If \\"--no-link\\" is specified, then project symlinks 
                        will NOT be created after the installation completes. 
                        You will need to run \\"rush link\\" manually. This flag 
                        is useful for automated builds that want to report 
                        stages individually or perform extra operations in 
                        between the two stages.
  --network-concurrency COUNT
                        If specified, limits the maximum number of concurrent 
                        network requests. This is useful when troubleshooting 
                        network failures.
  --debug-package-manager
                        Activates verbose logging for the package manager. 
                        You will probably want to pipe the output of Rush to 
                        a file when using this command.
  --variant VARIANT     Run command using a variant installation 
                        configuration. This parameter may alternatively 
                        specified via the RUSH_VARIANT environment variable.
  --full                Normally \\"rush update\\" tries to preserve your 
                        existing installed versions and only makes the 
                        minimum updates needed to satisfy the package.json 
                        files. This conservative approach prevents your PR 
                        from getting involved with package updates that are 
                        unrelated to your work. Use \\"--full\\" when you really 
                        want to update all dependencies to the latest 
                        SemVer-compatible version. This should be done 
                        periodically by a person or robot whose role is to 
                        deal with potential upgrade regressions.
  --recheck             If the shrinkwrap file appears to already satisfy the 
                        package.json files, then \\"rush update\\" will skip 
                        invoking the package manager at all. In certain 
                        situations this heuristic may be inaccurate. Use the 
                        \\"--recheck\\" flag to force the package manager to 
                        process the shrinkwrap file. This will also update 
                        your shrinkwrap file with Rush's fixups. (To minimize 
                        shrinkwrap churn, these fixups are normally performed 
                        only in the temporary folder.)
"
`;

exports[`CommandLineHelp prints the help for each action: version 1`] = `
"usage: rush version [-h] [-b BRANCH] [--ensure-version-policy]
                    [--override-version NEW_VERSION] [--bump]
                    [--bypass-policy] [--version-policy POLICY]
                    [--override-bump BUMPTYPE] [--override-prerelease-id ID]
                    

(EXPERIMENTAL) use this \\"rush version\\" command to ensure version policies and 
bump versions.

Optional arguments:
  -h, --help            Show this help message and exit.
  -b BRANCH, --target-branch BRANCH
                        If this flag is specified, changes will be committed 
                        and merged into the target branch.
  --ensure-version-policy
                        Updates package versions if needed to satisfy version 
                        policies.
  --override-version NEW_VERSION
                        Override the version in the specified 
                        --version-policy. This setting only works for 
                        lock-step version policy and when 
                        --ensure-version-policy is specified.
  --bump                Bumps package version based on version policies.
  --bypass-policy       Overrides \\"gitPolicy\\" enforcement (use honorably!)
  --version-policy POLICY
                        The name of the version policy
  --override-bump BUMPTYPE
                        Overrides the bump type in the version-policy.json 
                        for the specified version policy.Valid BUMPTYPE 
                        values include: prerelease, patch, preminor, minor, 
                        major. This setting only works for lock-step version 
                        policy in bump action.
  --override-prerelease-id ID
                        Overrides the prerelease identifier in the version 
                        value of version-policy.json for the specified 
                        version policy. This setting only works for lock-step 
                        version policy. This setting increases to new 
                        prerelease id when \\"--bump\\" is provided but only 
                        replaces the prerelease name when 
                        \\"--ensure-version-policy\\" is provided.
"
`;
